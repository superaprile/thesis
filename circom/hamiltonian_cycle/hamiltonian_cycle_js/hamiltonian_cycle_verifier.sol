// SPDX-License-Identifier: GPL-3.0
/*
    Copyright 2021 0KIMS association.

    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).

    snarkJS is a free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    snarkJS is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
    License for more details.

    You should have received a copy of the GNU General Public License
    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
*/

pragma solidity >=0.7.0 <0.9.0;

contract Groth16Verifier {
    // Scalar field size
    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    // Base field size
    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    // Verification Key data
    uint256 constant alphax  = 509082108415983427411190606511971753257873710689073997304990128279180972297;
    uint256 constant alphay  = 6793539524297765289553562511483378101438824532464211639851520692699261261491;
    uint256 constant betax1  = 10751589567638784705922356696998155435151319461772666064477018416300725185153;
    uint256 constant betax2  = 14598503796898605023276451760180660438693947842266210381716360838019524995410;
    uint256 constant betay1  = 7621825041748292028477526134636384855175994625049930202857106434365252874512;
    uint256 constant betay2  = 10453382394401031223135301818390947422477364446945012535522916801499013033241;
    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 constant deltax1 = 4019791318495281792097259952363336277765323260024540080701173326568791540250;
    uint256 constant deltax2 = 14927445930381890264260497343194327005793945608283613954756842344036196852471;
    uint256 constant deltay1 = 11130824287850045188774434883327834469632908169263308449901025597311998631391;
    uint256 constant deltay2 = 13895212238873667152375826220642834501621740178405432954005522399325703820592;

    
    uint256 constant IC0x = 11792541186729584829925908408147641266647816988447590160990855699371765007520;
    uint256 constant IC0y = 2866125105468200409551151790287878077620966644351775781112254915900420629322;
    
    uint256 constant IC1x = 1267449227499643300699287231106258478858816902220112207120456485647608463714;
    uint256 constant IC1y = 19646570031116240055577424731536244706265137259462776733031990442614781475958;
    
    uint256 constant IC2x = 11819708197524241509227287416567493247655398373464614979076881610444849879540;
    uint256 constant IC2y = 5215599966803822038766335997668448038253658436721656337986819972846622192045;
    
    uint256 constant IC3x = 14367389980992223971782005494698702530561316190027096424845245566575828305877;
    uint256 constant IC3y = 19228219392479873531728521413708575774624919522346616457021405819160165462524;
    
    uint256 constant IC4x = 17699257731834669836981421000549086698485197470144306344498496007461121119807;
    uint256 constant IC4y = 1125468283581019444001611860667078727321732385118866030575228542820788936286;
    
    uint256 constant IC5x = 11868349198328139558682027044930286271547955284331604747412660426057864929120;
    uint256 constant IC5y = 11580436117582398977810419621555902092598029637589998323464418787568549987125;
    
    uint256 constant IC6x = 13743192547219840907973884747941967215422080611194068067402040133242326643937;
    uint256 constant IC6y = 6649305308587803547463503765339316931874511365509886090858365020174422346712;
    
    uint256 constant IC7x = 10569678432028476389404851434617079441548055452382462562142456500447340319290;
    uint256 constant IC7y = 8239704600013022491371343474320622727354515384279514305278746021446133398193;
    
    uint256 constant IC8x = 141479547894931918218867474362009495599968027053587289914516912665898846995;
    uint256 constant IC8y = 19564970273379306735174390409708583586102004074096772387882853967818215573817;
    
    uint256 constant IC9x = 5506535409881578239091057166649262006562207632170640259746592969802978037396;
    uint256 constant IC9y = 10640386366476102105453554649153184866125436224617096807878088511768575952755;
    
    uint256 constant IC10x = 15173698900111103180500584719562952819465123475004782488156059391055732529152;
    uint256 constant IC10y = 1613824334888097745840812150591797919292497749361837473391866542986578999310;
    
    uint256 constant IC11x = 1672659406657598138449557103961520601800837855383644635293352159571909362145;
    uint256 constant IC11y = 3106515487934366019817297225563868021956754542844596748110538623153153935412;
    
    uint256 constant IC12x = 7184813517255727420429463119144468673651201187378799878159612193853172342091;
    uint256 constant IC12y = 3157997978715291537165845368308658710015539975795965998215418202181006907446;
    
    uint256 constant IC13x = 15894976956630004742391946076979887402197502676855472376354303307498232502153;
    uint256 constant IC13y = 4614581476526695366626414444036373156986485850003681562405272470072188061368;
    
    uint256 constant IC14x = 19752628137819200432655877530223372563696799342281195098050674227521767001595;
    uint256 constant IC14y = 4456069873250095617870540643796885104813624074237978833598396556492173502798;
    
    uint256 constant IC15x = 5473808679918423093014480229110773978894397767183854882092584734089162518598;
    uint256 constant IC15y = 15369454663663411724183524032686015311487575443412739117214247984719925850959;
    
    uint256 constant IC16x = 704298267166195224360466952237335224831840836780488618484954830754613688239;
    uint256 constant IC16y = 7512354852886831815912019374733407692601440506331996300461389689099808903763;
    
    uint256 constant IC17x = 18558350482128179259531659558480418274904706834296913233211951193201668341902;
    uint256 constant IC17y = 19755728797367044039338405096199510324205409232207714001958026727615579329402;
    
    uint256 constant IC18x = 21493027082752677827831519979906543411760241474918577496370874977465966646112;
    uint256 constant IC18y = 15953210559359972715782013609010833081535405374390398348015872929583108647911;
    
    uint256 constant IC19x = 15736765055065188557217292073026045563773431739524783698462016559068964557714;
    uint256 constant IC19y = 16889523018763629068018438606106546230869828081784594087871958388094613609146;
    
    uint256 constant IC20x = 9131905985440460317158495815368824786921144896935567680739534516505318260665;
    uint256 constant IC20y = 2388128410614806525214742867448190602498256895770887727368684273332032232784;
    
    uint256 constant IC21x = 9671108208387378417669380577158295406411993028011108996713047761913865568594;
    uint256 constant IC21y = 8950971673015147285661137251440640190331122651530462716080703269279046454171;
    
    uint256 constant IC22x = 11816467603633541138024176808332162454237758029575535092097838641226118395043;
    uint256 constant IC22y = 7834688810082938588702686801503587274894183793808459611348885600393484837943;
    
    uint256 constant IC23x = 7722434695949165547599459703848949260408396659017239858685182592537609381219;
    uint256 constant IC23y = 9851263958776148915652781365616799384755852557171451335032055025015891078413;
    
    uint256 constant IC24x = 18147445757912998972090590745308510105429463755725826560551247580807238111005;
    uint256 constant IC24y = 20518543122846295757220550192950363920605880491882884269026738632288647024107;
    
    uint256 constant IC25x = 12275355290888546699843758678576408640990331814651797057637655483853094423942;
    uint256 constant IC25y = 1371584352949322340763141914226434497569101465028615445847531640685921085015;
    
    uint256 constant IC26x = 11107251650307317563468217379828554547017445957535950858639569217229802353453;
    uint256 constant IC26y = 16024848071941210891376574461352972078800102161719825507151521598647812351385;
    
    uint256 constant IC27x = 3756320253692265830167252641915914531562919621997508107467858100768049702657;
    uint256 constant IC27y = 5284806138804015339098961389672347354834716690494567020183464318798520019814;
    
    uint256 constant IC28x = 4545405664054526322824164256803705935969560063620946453663251506315516448142;
    uint256 constant IC28y = 8328658352108777183840367587757811009852574616147602863725908904768081966622;
    
    uint256 constant IC29x = 6171323432161925383351219110172843674053379157086494395651410104514136287550;
    uint256 constant IC29y = 19175824110451759845916523406161272037097020633440265418746905836954115069269;
    
    uint256 constant IC30x = 20878530980974239986663572660720293414125394186700819382848058564509637728856;
    uint256 constant IC30y = 6711417084019044363546232793854006306845264549186977955741390306900409521744;
    
    uint256 constant IC31x = 16727356098988279679586849439167902784320409629690664357784502286740709169086;
    uint256 constant IC31y = 13828460814349883671286811119999875438706835085280622518213922028865034114442;
    
    uint256 constant IC32x = 10561465903130341325149513920271135055317744221818201247403605554896292680956;
    uint256 constant IC32y = 7420620732011887119789730201839158195469279318198231468117821965966526250287;
    
    uint256 constant IC33x = 11463435380444283292744717817151875489826930125511678001620930811603184615601;
    uint256 constant IC33y = 19440354643470927096589246187243338140285501104663608964560055013185524663243;
    
    uint256 constant IC34x = 11423645916743941368341381454551263165878664896768986782154703160290964591165;
    uint256 constant IC34y = 9750059550128664138653791812006064774050627066451545846110393307007198080701;
    
    uint256 constant IC35x = 18031842145596144695584712327397723232490472897169517098223531131775316020341;
    uint256 constant IC35y = 14032807352073450751679556768886183325138258101956902742966248569188522924601;
    
    uint256 constant IC36x = 8673038460774953117592335266220698614491207957523838824041216993781195254991;
    uint256 constant IC36y = 7210253504890974840464036570133839966201842583406727955952942105631532150222;
    
    uint256 constant IC37x = 4096119084496344983225920037774251114067842772657433219802492898253376388612;
    uint256 constant IC37y = 17472347349003885672621939672180006136125883295350201196609473226187672089414;
    
    uint256 constant IC38x = 17483858555567052999301788479593696734577667878779961646873539724192799404032;
    uint256 constant IC38y = 3501438383090385701558281603268256166035704018928742931897692764006251426493;
    
    uint256 constant IC39x = 14221925874546367923426753223590085928615539249149219190860146194801624233633;
    uint256 constant IC39y = 15202432386729613582560250957017636872439048548411993063609662038627395162216;
    
    uint256 constant IC40x = 20039144830524223038945962751815958479256132835820871943105989184937818129149;
    uint256 constant IC40y = 15035076859147229992666927124677101626107229725439299584269849339563868260303;
    
    uint256 constant IC41x = 19544861644878606405655847141346313638914742849666469091405895741999022475731;
    uint256 constant IC41y = 10969396716690879354777120097977048664830473484237636259630543484622585071354;
    
    uint256 constant IC42x = 6347856388569064400300117840503943260149206396489848908482989909380492386114;
    uint256 constant IC42y = 21628533610186285405982282682343201576683123483693600116462272383342838207836;
    
    uint256 constant IC43x = 13524417948593207544704906057420899944721778303105734673260587237268293186597;
    uint256 constant IC43y = 9484105855909594043196276553081122653011631287911984004438978700431391054622;
    
    uint256 constant IC44x = 8226928959289344066627518097114618404161794110160670121195384444942554285241;
    uint256 constant IC44y = 3880319485834562505149361337802032249038400142781149669729839976749369632914;
    
    uint256 constant IC45x = 5137281872655875952075306193281649084878990899563611626925994130655278931031;
    uint256 constant IC45y = 10451807357717955650003769629964182677820206078282519927752562257042614791247;
    
    uint256 constant IC46x = 9325956328327001189151747234169027043500278825434830466383637363023260015581;
    uint256 constant IC46y = 6332580287156842019036793203664844600336286132728562337732017334290652933945;
    
    uint256 constant IC47x = 11836060723099476000011465458610990189037737384793333511084766774924224577442;
    uint256 constant IC47y = 5920471440116172948043991949880386894573433396041402116216528057864742175148;
    
    uint256 constant IC48x = 7463385746507007722917563901036115878791210809648349250090130233975716426041;
    uint256 constant IC48y = 10550706512294722779529199913060106575636449696347511675086708577063677392177;
    
    uint256 constant IC49x = 13010784149373900959538507981763643296733548823386177706232612069811658186448;
    uint256 constant IC49y = 8388771391529180856953886073687032630258149590501496354127060931891305678994;
    
    uint256 constant IC50x = 17055069443343569650407307202513037305814671681889894771582343635454024450103;
    uint256 constant IC50y = 4431999661268577064057350317066503528890281181078137818780266933930687332315;
    
    uint256 constant IC51x = 5511764544682306056749202296497265506720060587257407107669517991782929380109;
    uint256 constant IC51y = 16479536946720808148659998563388519538600992407176238459702723346774859256847;
    
    uint256 constant IC52x = 9521704746215376158881790649206176228195725164173879801237363405915717311721;
    uint256 constant IC52y = 19304532004275031112615810415094294325814257855927074231407494355801765135838;
    
    uint256 constant IC53x = 3077656119685618869513552176330984773606278789128879589894790370877022959174;
    uint256 constant IC53y = 12362354001614427751135772719054562253815297574736926675286430164385141104019;
    
    uint256 constant IC54x = 5147955579189732826833820716570619521078999957597446412600710377158082354142;
    uint256 constant IC54y = 6521906049859591259773941647786117522217106657538541443120873354359129480956;
    
    uint256 constant IC55x = 18505008061604367422996521934176275584237918133844895739527012243154220641383;
    uint256 constant IC55y = 21526723129984352538822187347639478125793233679959963263798786902015921943438;
    
    uint256 constant IC56x = 6243898209848432521152064644058387117988494621726201449343743676964114757370;
    uint256 constant IC56y = 10598061475741455009136313982190949061971366864340445870299500749478700030916;
    
    uint256 constant IC57x = 5090446537208442259875551549825578138521660400577549320902183942015571841937;
    uint256 constant IC57y = 10474914562297242907134027986442067783094877936677324157093221393977266464359;
    
    uint256 constant IC58x = 13265661951020778691039661683300946686562934533944704386251264447861497529311;
    uint256 constant IC58y = 20234754125112073796129055189399752231540882822738481189848564709408818247010;
    
    uint256 constant IC59x = 12985373431402781520089979891863702764458017323784360436062549839720245526473;
    uint256 constant IC59y = 1422612506906586930257980892309090069557758838191740967940383628077609087326;
    
    uint256 constant IC60x = 6408679548684164816958608423017038013615101453955335576643239139179588265154;
    uint256 constant IC60y = 14086462568792098225568787536968201746849338720827741083093423547337377662555;
    
    uint256 constant IC61x = 18251654837656701250353288704420457028649970178953661452698788933725717900440;
    uint256 constant IC61y = 17333855054003985883515918419054088806544470366602175274129461162257670891138;
    
    uint256 constant IC62x = 11441476913548115584659698793276349418315717325409368060401271881021798485361;
    uint256 constant IC62y = 18233402063676416882952733717604728544952566719798484477735129146868586102399;
    
    uint256 constant IC63x = 7365117749801072658472281507015831701235858060532969339256671000721646495790;
    uint256 constant IC63y = 2962082973743494653144251476811277643345874942351547856457915618810194825825;
    
    uint256 constant IC64x = 13603397763551115415755457797316191063152323177266766661593671846842419347120;
    uint256 constant IC64y = 7368145178690654065310893621127085703919582595894181014383924429752143535633;
    
    uint256 constant IC65x = 17103882930700636773824893377340774538060964118389399287801837231130495829786;
    uint256 constant IC65y = 18312261751834030461067146883251861274077648291989353737673476480468118850179;
    
    uint256 constant IC66x = 12173304871304188365711715689180630802080131987345723988053362063690217052046;
    uint256 constant IC66y = 8825267494961129793070268153314168088687213172387403079580409221999625500827;
    
    uint256 constant IC67x = 21844604131310119980680193087566498176030652739627104757866492375369620709372;
    uint256 constant IC67y = 17198571304037766602103317543269071325088014632854917442039201329566620048475;
    
    uint256 constant IC68x = 5416262770385347747517600390555126438787385203341146789290516827176253530221;
    uint256 constant IC68y = 16688655675610836456106999153067858240497290251721709349125344141578595093752;
    
    uint256 constant IC69x = 5932858278626823597012929429238928661840871375824172776698193121637911911460;
    uint256 constant IC69y = 1320753959689023433424083149580947782287686540922032459682573503285175744775;
    
    uint256 constant IC70x = 10893763273931075336567727527483709760828456987781630899245038558552306986047;
    uint256 constant IC70y = 21207922861562681347333982727168036155405193583305100436602764238244048598423;
    
    uint256 constant IC71x = 7819015686085016996844875848425225650899154724710725396228547864019351469139;
    uint256 constant IC71y = 12135624306804506590317848692347378648237012711022139939024342710929807058020;
    
    uint256 constant IC72x = 13635198543892735863373465855329122281504813407378690968494570214075157972373;
    uint256 constant IC72y = 20806830147329327141006490147172340888462037243331022240343576547465549022390;
    
    uint256 constant IC73x = 19451970291992595504139967348522779317563149695846007075253988071892589640997;
    uint256 constant IC73y = 774600404639103674278618328568917971210008693752030747694826208872097026013;
    
    uint256 constant IC74x = 21163362873126755130186873238038161803161765119481890940363382080439071246281;
    uint256 constant IC74y = 9425102481406237434773423857667172611721853092931819728814182204481015874076;
    
    uint256 constant IC75x = 2429888454370062294085066978376981758315833967250066229509616133948850600037;
    uint256 constant IC75y = 20594820892358062309295527179122589864022897283364014229165315847942234107578;
    
    uint256 constant IC76x = 21645053330723146441067787995553195309493851763944798157078607536831036209603;
    uint256 constant IC76y = 2121492460140404276756085485129276659897347652973093901097292443445565084318;
    
    uint256 constant IC77x = 6744932850802083930714199144570487854474784618590511028370666030946412692803;
    uint256 constant IC77y = 17720080438865904595357089970437397211573213916541441790013156728734483826727;
    
    uint256 constant IC78x = 1878450572272241262370823737556685155651736553601503511821004696441285053137;
    uint256 constant IC78y = 13143367075597925696519470270951670857253686266953624386411572590257991004729;
    
    uint256 constant IC79x = 12965589707446232631602596878784249394132876362900274595143099165220039053124;
    uint256 constant IC79y = 8535208743008960569956134403820041820321010223634754857570031110355260870497;
    
    uint256 constant IC80x = 8862863810230141544009997887308878490081278169148853880201578919496470537703;
    uint256 constant IC80y = 7010682345515081428302085423426222714809938758238153917066040531891337015023;
    
    uint256 constant IC81x = 16052157977157501252746645498315149735295657450215000055831058939406468181375;
    uint256 constant IC81y = 19110431660539831423429864783383333289234892266835668747050686173500812717179;
    
    uint256 constant IC82x = 19774623385522768685810311312173427376771078302322958512784878619579345226268;
    uint256 constant IC82y = 18052409230947331462115270224778674517186076822789745838712329303649492022855;
    
    uint256 constant IC83x = 4555122315021284836437103279444341235349382749278590414784628317185183500211;
    uint256 constant IC83y = 10524074836787620634590036432486423938840481873675908731185086735440739559215;
    
    uint256 constant IC84x = 5363728504547080596300781144982890509950535465783380401283600069401077079853;
    uint256 constant IC84y = 6199398500793685563643912982905406001948002135957307446457102569565552583376;
    
    uint256 constant IC85x = 13152252810080385439679838633018619185227576381802335195543552347154901235196;
    uint256 constant IC85y = 20439960057516985227172983375665560929043209295089702132604802669009274803623;
    
    uint256 constant IC86x = 2405720423768353817657129533217501879054133586491517074025365248588150405006;
    uint256 constant IC86y = 7769925533307719656226476591574435156400255388055812039355754711853403197177;
    
    uint256 constant IC87x = 10227537842992799729209147648040862703652325079252526793505477267859592187455;
    uint256 constant IC87y = 20852437249578054247048550122401482300722244896626653350348763649408671667757;
    
    uint256 constant IC88x = 13246649315553502701046164096435347749438355000148767725393190326860010273057;
    uint256 constant IC88y = 16058346988117871135851465642576928832686879242054019615537496655782896998336;
    
    uint256 constant IC89x = 3312423918856455127384755507513181718772181890549488761369333913044847792069;
    uint256 constant IC89y = 12566347658037752821413694646306675413588928735590775616177468187940101772755;
    
    uint256 constant IC90x = 10846469778475753840062747407471257296024644359748651709393047002727505112312;
    uint256 constant IC90y = 7951768081199358975686648608986391426142517670615554756283105702942661234216;
    
    uint256 constant IC91x = 6070808986984634948839520020436511884472764258684288100060948164719438343115;
    uint256 constant IC91y = 12579326518488808412096395787656520172988971764489540326229672671870902307318;
    
    uint256 constant IC92x = 6368775795315822862432739902429645506928660994996597316547641146700049065218;
    uint256 constant IC92y = 2005797411930113007995312246622520771226123090433028447483779452849190915367;
    
    uint256 constant IC93x = 6261327050218394688818165902198581268744891064673709482673092809415960154498;
    uint256 constant IC93y = 11434881795198859509646897150928812620321775015939176129582700330685611372325;
    
    uint256 constant IC94x = 9417580683125771194035275922605574847618135266684948640265092563542764421351;
    uint256 constant IC94y = 748919610201083176086960380050915426987522071514593452275397006318886111712;
    
    uint256 constant IC95x = 19026002914186564494671590151755020800379209824394793543081121997304490139722;
    uint256 constant IC95y = 1976389205277428059270498686351489132544705090716862650342901760814510283769;
    
    uint256 constant IC96x = 16926112186595111148630564624063769199664804340721681840370476635038597031956;
    uint256 constant IC96y = 8689943818836080129390382527257870074644805559521511558247522737497005128496;
    
    uint256 constant IC97x = 15094213385389547070206523650690704946660918769353394222469998575689977893462;
    uint256 constant IC97y = 4858404742558942840667661380243676714656579454575459224600360257756184025132;
    
    uint256 constant IC98x = 2274785324413439581845737675205959548711214772339358472070515738762934540953;
    uint256 constant IC98y = 7445641715147310782157905190893505335972503795881463309565360500637428809829;
    
    uint256 constant IC99x = 17436098554783642873786623184421993734969050102802596581563707983827905625873;
    uint256 constant IC99y = 1320793071861116428725462175771661293118654517907684440780541657840702789754;
    
    uint256 constant IC100x = 4061351781811075779929584710435441822870865241295755926883667207117038028520;
    uint256 constant IC100y = 20672848572328701003604939008816173801494112042608051124314923163827499301439;
    
    uint256 constant IC101x = 16952900325627327514198231241250433821127018675006617602521277105872991483226;
    uint256 constant IC101y = 17911685242234210843118425116835548093064349224756585790539168264050703580878;
    
 
    // Memory data
    uint16 constant pVk = 0;
    uint16 constant pPairing = 128;

    uint16 constant pLastMem = 896;

    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[101] calldata _pubSignals) public view returns (bool) {
        assembly {
            function checkField(v) {
                if iszero(lt(v, r)) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }
            
            // G1 function to multiply a G1 value(x,y) to value in an address
            function g1_mulAccC(pR, x, y, s) {
                let success
                let mIn := mload(0x40)
                mstore(mIn, x)
                mstore(add(mIn, 32), y)
                mstore(add(mIn, 64), s)

                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }

                mstore(add(mIn, 64), mload(pR))
                mstore(add(mIn, 96), mload(add(pR, 32)))

                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }

            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {
                let _pPairing := add(pMem, pPairing)
                let _pVk := add(pMem, pVk)

                mstore(_pVk, IC0x)
                mstore(add(_pVk, 32), IC0y)

                // Compute the linear combination vk_x
                
                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))
                
                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))
                
                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))
                
                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))
                
                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))
                
                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))
                
                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))
                
                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))
                
                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))
                
                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))
                
                g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))
                
                g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))
                
                g1_mulAccC(_pVk, IC13x, IC13y, calldataload(add(pubSignals, 384)))
                
                g1_mulAccC(_pVk, IC14x, IC14y, calldataload(add(pubSignals, 416)))
                
                g1_mulAccC(_pVk, IC15x, IC15y, calldataload(add(pubSignals, 448)))
                
                g1_mulAccC(_pVk, IC16x, IC16y, calldataload(add(pubSignals, 480)))
                
                g1_mulAccC(_pVk, IC17x, IC17y, calldataload(add(pubSignals, 512)))
                
                g1_mulAccC(_pVk, IC18x, IC18y, calldataload(add(pubSignals, 544)))
                
                g1_mulAccC(_pVk, IC19x, IC19y, calldataload(add(pubSignals, 576)))
                
                g1_mulAccC(_pVk, IC20x, IC20y, calldataload(add(pubSignals, 608)))
                
                g1_mulAccC(_pVk, IC21x, IC21y, calldataload(add(pubSignals, 640)))
                
                g1_mulAccC(_pVk, IC22x, IC22y, calldataload(add(pubSignals, 672)))
                
                g1_mulAccC(_pVk, IC23x, IC23y, calldataload(add(pubSignals, 704)))
                
                g1_mulAccC(_pVk, IC24x, IC24y, calldataload(add(pubSignals, 736)))
                
                g1_mulAccC(_pVk, IC25x, IC25y, calldataload(add(pubSignals, 768)))
                
                g1_mulAccC(_pVk, IC26x, IC26y, calldataload(add(pubSignals, 800)))
                
                g1_mulAccC(_pVk, IC27x, IC27y, calldataload(add(pubSignals, 832)))
                
                g1_mulAccC(_pVk, IC28x, IC28y, calldataload(add(pubSignals, 864)))
                
                g1_mulAccC(_pVk, IC29x, IC29y, calldataload(add(pubSignals, 896)))
                
                g1_mulAccC(_pVk, IC30x, IC30y, calldataload(add(pubSignals, 928)))
                
                g1_mulAccC(_pVk, IC31x, IC31y, calldataload(add(pubSignals, 960)))
                
                g1_mulAccC(_pVk, IC32x, IC32y, calldataload(add(pubSignals, 992)))
                
                g1_mulAccC(_pVk, IC33x, IC33y, calldataload(add(pubSignals, 1024)))
                
                g1_mulAccC(_pVk, IC34x, IC34y, calldataload(add(pubSignals, 1056)))
                
                g1_mulAccC(_pVk, IC35x, IC35y, calldataload(add(pubSignals, 1088)))
                
                g1_mulAccC(_pVk, IC36x, IC36y, calldataload(add(pubSignals, 1120)))
                
                g1_mulAccC(_pVk, IC37x, IC37y, calldataload(add(pubSignals, 1152)))
                
                g1_mulAccC(_pVk, IC38x, IC38y, calldataload(add(pubSignals, 1184)))
                
                g1_mulAccC(_pVk, IC39x, IC39y, calldataload(add(pubSignals, 1216)))
                
                g1_mulAccC(_pVk, IC40x, IC40y, calldataload(add(pubSignals, 1248)))
                
                g1_mulAccC(_pVk, IC41x, IC41y, calldataload(add(pubSignals, 1280)))
                
                g1_mulAccC(_pVk, IC42x, IC42y, calldataload(add(pubSignals, 1312)))
                
                g1_mulAccC(_pVk, IC43x, IC43y, calldataload(add(pubSignals, 1344)))
                
                g1_mulAccC(_pVk, IC44x, IC44y, calldataload(add(pubSignals, 1376)))
                
                g1_mulAccC(_pVk, IC45x, IC45y, calldataload(add(pubSignals, 1408)))
                
                g1_mulAccC(_pVk, IC46x, IC46y, calldataload(add(pubSignals, 1440)))
                
                g1_mulAccC(_pVk, IC47x, IC47y, calldataload(add(pubSignals, 1472)))
                
                g1_mulAccC(_pVk, IC48x, IC48y, calldataload(add(pubSignals, 1504)))
                
                g1_mulAccC(_pVk, IC49x, IC49y, calldataload(add(pubSignals, 1536)))
                
                g1_mulAccC(_pVk, IC50x, IC50y, calldataload(add(pubSignals, 1568)))
                
                g1_mulAccC(_pVk, IC51x, IC51y, calldataload(add(pubSignals, 1600)))
                
                g1_mulAccC(_pVk, IC52x, IC52y, calldataload(add(pubSignals, 1632)))
                
                g1_mulAccC(_pVk, IC53x, IC53y, calldataload(add(pubSignals, 1664)))
                
                g1_mulAccC(_pVk, IC54x, IC54y, calldataload(add(pubSignals, 1696)))
                
                g1_mulAccC(_pVk, IC55x, IC55y, calldataload(add(pubSignals, 1728)))
                
                g1_mulAccC(_pVk, IC56x, IC56y, calldataload(add(pubSignals, 1760)))
                
                g1_mulAccC(_pVk, IC57x, IC57y, calldataload(add(pubSignals, 1792)))
                
                g1_mulAccC(_pVk, IC58x, IC58y, calldataload(add(pubSignals, 1824)))
                
                g1_mulAccC(_pVk, IC59x, IC59y, calldataload(add(pubSignals, 1856)))
                
                g1_mulAccC(_pVk, IC60x, IC60y, calldataload(add(pubSignals, 1888)))
                
                g1_mulAccC(_pVk, IC61x, IC61y, calldataload(add(pubSignals, 1920)))
                
                g1_mulAccC(_pVk, IC62x, IC62y, calldataload(add(pubSignals, 1952)))
                
                g1_mulAccC(_pVk, IC63x, IC63y, calldataload(add(pubSignals, 1984)))
                
                g1_mulAccC(_pVk, IC64x, IC64y, calldataload(add(pubSignals, 2016)))
                
                g1_mulAccC(_pVk, IC65x, IC65y, calldataload(add(pubSignals, 2048)))
                
                g1_mulAccC(_pVk, IC66x, IC66y, calldataload(add(pubSignals, 2080)))
                
                g1_mulAccC(_pVk, IC67x, IC67y, calldataload(add(pubSignals, 2112)))
                
                g1_mulAccC(_pVk, IC68x, IC68y, calldataload(add(pubSignals, 2144)))
                
                g1_mulAccC(_pVk, IC69x, IC69y, calldataload(add(pubSignals, 2176)))
                
                g1_mulAccC(_pVk, IC70x, IC70y, calldataload(add(pubSignals, 2208)))
                
                g1_mulAccC(_pVk, IC71x, IC71y, calldataload(add(pubSignals, 2240)))
                
                g1_mulAccC(_pVk, IC72x, IC72y, calldataload(add(pubSignals, 2272)))
                
                g1_mulAccC(_pVk, IC73x, IC73y, calldataload(add(pubSignals, 2304)))
                
                g1_mulAccC(_pVk, IC74x, IC74y, calldataload(add(pubSignals, 2336)))
                
                g1_mulAccC(_pVk, IC75x, IC75y, calldataload(add(pubSignals, 2368)))
                
                g1_mulAccC(_pVk, IC76x, IC76y, calldataload(add(pubSignals, 2400)))
                
                g1_mulAccC(_pVk, IC77x, IC77y, calldataload(add(pubSignals, 2432)))
                
                g1_mulAccC(_pVk, IC78x, IC78y, calldataload(add(pubSignals, 2464)))
                
                g1_mulAccC(_pVk, IC79x, IC79y, calldataload(add(pubSignals, 2496)))
                
                g1_mulAccC(_pVk, IC80x, IC80y, calldataload(add(pubSignals, 2528)))
                
                g1_mulAccC(_pVk, IC81x, IC81y, calldataload(add(pubSignals, 2560)))
                
                g1_mulAccC(_pVk, IC82x, IC82y, calldataload(add(pubSignals, 2592)))
                
                g1_mulAccC(_pVk, IC83x, IC83y, calldataload(add(pubSignals, 2624)))
                
                g1_mulAccC(_pVk, IC84x, IC84y, calldataload(add(pubSignals, 2656)))
                
                g1_mulAccC(_pVk, IC85x, IC85y, calldataload(add(pubSignals, 2688)))
                
                g1_mulAccC(_pVk, IC86x, IC86y, calldataload(add(pubSignals, 2720)))
                
                g1_mulAccC(_pVk, IC87x, IC87y, calldataload(add(pubSignals, 2752)))
                
                g1_mulAccC(_pVk, IC88x, IC88y, calldataload(add(pubSignals, 2784)))
                
                g1_mulAccC(_pVk, IC89x, IC89y, calldataload(add(pubSignals, 2816)))
                
                g1_mulAccC(_pVk, IC90x, IC90y, calldataload(add(pubSignals, 2848)))
                
                g1_mulAccC(_pVk, IC91x, IC91y, calldataload(add(pubSignals, 2880)))
                
                g1_mulAccC(_pVk, IC92x, IC92y, calldataload(add(pubSignals, 2912)))
                
                g1_mulAccC(_pVk, IC93x, IC93y, calldataload(add(pubSignals, 2944)))
                
                g1_mulAccC(_pVk, IC94x, IC94y, calldataload(add(pubSignals, 2976)))
                
                g1_mulAccC(_pVk, IC95x, IC95y, calldataload(add(pubSignals, 3008)))
                
                g1_mulAccC(_pVk, IC96x, IC96y, calldataload(add(pubSignals, 3040)))
                
                g1_mulAccC(_pVk, IC97x, IC97y, calldataload(add(pubSignals, 3072)))
                
                g1_mulAccC(_pVk, IC98x, IC98y, calldataload(add(pubSignals, 3104)))
                
                g1_mulAccC(_pVk, IC99x, IC99y, calldataload(add(pubSignals, 3136)))
                
                g1_mulAccC(_pVk, IC100x, IC100y, calldataload(add(pubSignals, 3168)))
                
                g1_mulAccC(_pVk, IC101x, IC101y, calldataload(add(pubSignals, 3200)))
                

                // -A
                mstore(_pPairing, calldataload(pA))
                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))

                // B
                mstore(add(_pPairing, 64), calldataload(pB))
                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))
                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))
                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))

                // alpha1
                mstore(add(_pPairing, 192), alphax)
                mstore(add(_pPairing, 224), alphay)

                // beta2
                mstore(add(_pPairing, 256), betax1)
                mstore(add(_pPairing, 288), betax2)
                mstore(add(_pPairing, 320), betay1)
                mstore(add(_pPairing, 352), betay2)

                // vk_x
                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))
                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))


                // gamma2
                mstore(add(_pPairing, 448), gammax1)
                mstore(add(_pPairing, 480), gammax2)
                mstore(add(_pPairing, 512), gammay1)
                mstore(add(_pPairing, 544), gammay2)

                // C
                mstore(add(_pPairing, 576), calldataload(pC))
                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))

                // delta2
                mstore(add(_pPairing, 640), deltax1)
                mstore(add(_pPairing, 672), deltax2)
                mstore(add(_pPairing, 704), deltay1)
                mstore(add(_pPairing, 736), deltay2)


                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)

                isOk := and(success, mload(_pPairing))
            }

            let pMem := mload(0x40)
            mstore(0x40, add(pMem, pLastMem))

            // Validate that all evaluations ∈ F
            
            checkField(calldataload(add(_pubSignals, 0)))
            
            checkField(calldataload(add(_pubSignals, 32)))
            
            checkField(calldataload(add(_pubSignals, 64)))
            
            checkField(calldataload(add(_pubSignals, 96)))
            
            checkField(calldataload(add(_pubSignals, 128)))
            
            checkField(calldataload(add(_pubSignals, 160)))
            
            checkField(calldataload(add(_pubSignals, 192)))
            
            checkField(calldataload(add(_pubSignals, 224)))
            
            checkField(calldataload(add(_pubSignals, 256)))
            
            checkField(calldataload(add(_pubSignals, 288)))
            
            checkField(calldataload(add(_pubSignals, 320)))
            
            checkField(calldataload(add(_pubSignals, 352)))
            
            checkField(calldataload(add(_pubSignals, 384)))
            
            checkField(calldataload(add(_pubSignals, 416)))
            
            checkField(calldataload(add(_pubSignals, 448)))
            
            checkField(calldataload(add(_pubSignals, 480)))
            
            checkField(calldataload(add(_pubSignals, 512)))
            
            checkField(calldataload(add(_pubSignals, 544)))
            
            checkField(calldataload(add(_pubSignals, 576)))
            
            checkField(calldataload(add(_pubSignals, 608)))
            
            checkField(calldataload(add(_pubSignals, 640)))
            
            checkField(calldataload(add(_pubSignals, 672)))
            
            checkField(calldataload(add(_pubSignals, 704)))
            
            checkField(calldataload(add(_pubSignals, 736)))
            
            checkField(calldataload(add(_pubSignals, 768)))
            
            checkField(calldataload(add(_pubSignals, 800)))
            
            checkField(calldataload(add(_pubSignals, 832)))
            
            checkField(calldataload(add(_pubSignals, 864)))
            
            checkField(calldataload(add(_pubSignals, 896)))
            
            checkField(calldataload(add(_pubSignals, 928)))
            
            checkField(calldataload(add(_pubSignals, 960)))
            
            checkField(calldataload(add(_pubSignals, 992)))
            
            checkField(calldataload(add(_pubSignals, 1024)))
            
            checkField(calldataload(add(_pubSignals, 1056)))
            
            checkField(calldataload(add(_pubSignals, 1088)))
            
            checkField(calldataload(add(_pubSignals, 1120)))
            
            checkField(calldataload(add(_pubSignals, 1152)))
            
            checkField(calldataload(add(_pubSignals, 1184)))
            
            checkField(calldataload(add(_pubSignals, 1216)))
            
            checkField(calldataload(add(_pubSignals, 1248)))
            
            checkField(calldataload(add(_pubSignals, 1280)))
            
            checkField(calldataload(add(_pubSignals, 1312)))
            
            checkField(calldataload(add(_pubSignals, 1344)))
            
            checkField(calldataload(add(_pubSignals, 1376)))
            
            checkField(calldataload(add(_pubSignals, 1408)))
            
            checkField(calldataload(add(_pubSignals, 1440)))
            
            checkField(calldataload(add(_pubSignals, 1472)))
            
            checkField(calldataload(add(_pubSignals, 1504)))
            
            checkField(calldataload(add(_pubSignals, 1536)))
            
            checkField(calldataload(add(_pubSignals, 1568)))
            
            checkField(calldataload(add(_pubSignals, 1600)))
            
            checkField(calldataload(add(_pubSignals, 1632)))
            
            checkField(calldataload(add(_pubSignals, 1664)))
            
            checkField(calldataload(add(_pubSignals, 1696)))
            
            checkField(calldataload(add(_pubSignals, 1728)))
            
            checkField(calldataload(add(_pubSignals, 1760)))
            
            checkField(calldataload(add(_pubSignals, 1792)))
            
            checkField(calldataload(add(_pubSignals, 1824)))
            
            checkField(calldataload(add(_pubSignals, 1856)))
            
            checkField(calldataload(add(_pubSignals, 1888)))
            
            checkField(calldataload(add(_pubSignals, 1920)))
            
            checkField(calldataload(add(_pubSignals, 1952)))
            
            checkField(calldataload(add(_pubSignals, 1984)))
            
            checkField(calldataload(add(_pubSignals, 2016)))
            
            checkField(calldataload(add(_pubSignals, 2048)))
            
            checkField(calldataload(add(_pubSignals, 2080)))
            
            checkField(calldataload(add(_pubSignals, 2112)))
            
            checkField(calldataload(add(_pubSignals, 2144)))
            
            checkField(calldataload(add(_pubSignals, 2176)))
            
            checkField(calldataload(add(_pubSignals, 2208)))
            
            checkField(calldataload(add(_pubSignals, 2240)))
            
            checkField(calldataload(add(_pubSignals, 2272)))
            
            checkField(calldataload(add(_pubSignals, 2304)))
            
            checkField(calldataload(add(_pubSignals, 2336)))
            
            checkField(calldataload(add(_pubSignals, 2368)))
            
            checkField(calldataload(add(_pubSignals, 2400)))
            
            checkField(calldataload(add(_pubSignals, 2432)))
            
            checkField(calldataload(add(_pubSignals, 2464)))
            
            checkField(calldataload(add(_pubSignals, 2496)))
            
            checkField(calldataload(add(_pubSignals, 2528)))
            
            checkField(calldataload(add(_pubSignals, 2560)))
            
            checkField(calldataload(add(_pubSignals, 2592)))
            
            checkField(calldataload(add(_pubSignals, 2624)))
            
            checkField(calldataload(add(_pubSignals, 2656)))
            
            checkField(calldataload(add(_pubSignals, 2688)))
            
            checkField(calldataload(add(_pubSignals, 2720)))
            
            checkField(calldataload(add(_pubSignals, 2752)))
            
            checkField(calldataload(add(_pubSignals, 2784)))
            
            checkField(calldataload(add(_pubSignals, 2816)))
            
            checkField(calldataload(add(_pubSignals, 2848)))
            
            checkField(calldataload(add(_pubSignals, 2880)))
            
            checkField(calldataload(add(_pubSignals, 2912)))
            
            checkField(calldataload(add(_pubSignals, 2944)))
            
            checkField(calldataload(add(_pubSignals, 2976)))
            
            checkField(calldataload(add(_pubSignals, 3008)))
            
            checkField(calldataload(add(_pubSignals, 3040)))
            
            checkField(calldataload(add(_pubSignals, 3072)))
            
            checkField(calldataload(add(_pubSignals, 3104)))
            
            checkField(calldataload(add(_pubSignals, 3136)))
            
            checkField(calldataload(add(_pubSignals, 3168)))
            
            checkField(calldataload(add(_pubSignals, 3200)))
            

            // Validate all evaluations
            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)

            mstore(0, isValid)
             return(0, 0x20)
         }
     }
 }
